---
# ===================================================================================================
# Downloads, unpacks, installs, starts and checks a service {{ service }}, titled {{ title }}
# ===================================================================================================
# - Downloads {{ url }} to {{ archive }}, unpacks it to {{ home }} directory
#   {{ home }} is deleted before unpack, unless {{ clean }} is False
# - Writes {{ configs }}
# - Creates an upstart script to run {{ command }} as service {{ service }} and starts it
#   upstart script attempts to load {{ env_config }} and writes log to /var/log/{{ service }}.log
# - Verifies service endpoint responds at {{ port }} within {{ timeout }} seconds
# - Verifies http://127.0.0.1:{{ port }}{{ path }} to return {{ status }} code and {{ content }}
# ===================================================================================================
# - Required variables are: service, title, url, archive, home, command. Other are optional.
# ===================================================================================================
- debug: var=service
- debug: var=title
- debug: var=url
- debug: var=archive
- debug: var=home
- debug: var=command

- debug: msg="test = {{ test | default({}) }}"
- debug: msg="configs = '{{ configs | default({}) }}'"
- debug: msg="env_config = '{{ env_config | default('') }}'"
- debug: msg="port = '{{ port | default('') }}'"
- debug: msg="timeout = '{{ timeout | default('') }}'"
- debug: msg="path = '{{ path | default('') }}'"
- debug: msg="status = '{{ status | default('') }}'"
- debug: msg="content = '{{ content | default('') }}'"

- name: Stopping service {{ title }}
  service: name={{ service }} state=stopped
  ignore_errors: yes

- name: Downloading {{ title }}
  get_url:
    url:  "{{ url }}"
    dest: "{{ archive }}"

- debug: msg="Deleting '{{ home }}'!"
  when: clean | default(True)

- file: path={{ home }} state=absent
  when: clean | default(True)

- file: path={{ home }} state=directory

- name: Unpacking {{ title }}
  unarchive:
    src:  "{{ archive }}"
    dest: "{{ home }}"
    copy: false

- name:     Running {{ title }} test
  command:  "{{ test.run }}"
  register: test_out
  when:     test is defined

- name: Verifying {{ title }} test
  assert:
    that:
      - "'{{ test.expect }}' in '{{ test_out.stdout }}'"
  when: test is defined

  # fail: msg="Expected to find '{{ test.expect }}' in '{{ test_out.stdout }}', but didn't."

- file: path={{ item.to }} state=directory
  with_items:
    - "{{ configs }}"
  when: configs is defined

- name: Generating {{ title }} configs
  template:
    src:  "{{ item.from  }}"
    dest: "{{ item.to }}"
  with_items:
    - "{{ configs }}"
  when: configs is defined

- name: Generating {{ title }} upstart script
  template:
    src:  "{{ playbook_dir }}/utils/templates/upstart"
    dest: "{{ ubuntu.init_dir }}/{{ service }}.conf"

- name: Starting {{ title }} service
  service: name={{ service }} state=started enabled=yes

- name: Verifying {{ title }} endpoint
  wait_for: port={{ port }} timeout={{ timeout | default(5) }}
  when: port is defined

- name: Verifying {{ title }} HTTP endpoint
  uri:
    url:            "http://{{ common.net.localhost }}:{{ port }}{{ path | default( '' ) }}"
    status_code:    "{{ status | default( 200 )}}"
    return_content: yes
  register: http_out
  when: ( port is defined ) and (( path is defined ) or ( status is defined ) or ( content is defined ))

- name: Verifying {{ title }} HTTP endpoint content
  fail: msg="Expected to find '{{ http_out.content }}' in '{{ content }}', but didn't."
  when: ( port is defined ) and ( content is defined ) and ( '{{ content }}' not in '{{ http_out.content }}' )
