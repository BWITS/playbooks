---
# ===================================================================================================
# Downloads and unpacks an archive, installs, and starts a service {{ service }}, titled {{ title }}
# ===================================================================================================
# - Runs download.yml if {{ url }} and {{ archive }} are defined
# - Creates an upstart script to run {{ command }} as service {{ service }} and starts it
#   upstart script attempts to load {{ env_config }} and writes log to /var/log/{{ service }}.log
# - Verifies service endpoint reachable at {{ port }} within {{ timeout }} seconds
# - Waits for HTTP endpoint to respond with {{ wait_for }}
# - Verifies HTTP endpoint content with {{ verify }}
# ===================================================================================================
# - Required variables are: service, title, command. Others are optional.
# ===================================================================================================

- include: download.yml
  when:    ( url is defined ) and ( archive is defined )

- set_fact:
    upstart_script: "{{ ubuntu.init_dir }}/{{ service }}.conf"

- debug: msg="Starting {{ title }} service '{{ service }}' with '{{ command }}' in '{{ upstart_script }}'"

- name: Generating {{ title }} upstart script
  template:
    src:  "{{ playbook_dir }}/utils/templates/upstart"
    dest: "{{ ubuntu.init_dir }}/{{ service }}.conf"

- name:    Restarting {{ title }} service
  service: name={{ service }} state=restarted enabled=yes

- name: Waiting for {{ title }} endpoint
  wait_for: port={{ port }} timeout={{ timeout | default( 5 ) }}
  when: port is defined

- name: Waiting for {{ title }} HTTP endpoint
  uri:
    url:            "http://{{ common.net.localhost }}:{{ port }}{{ item.path | default('')}}"
    status_code:    "{{ item.status | default( 200 )}}"
    return_content: yes
  register: http_wait_out
  until:    item.content in http_wait_out.content
  # https://github.com/ansible/ansible/issues/5865
  retries: 20 # "{{ timeout | default( 5 ) | int // 3 }}"
  delay:   3
  with_items:
    - "{{ wait }}"
  when: ( port is defined ) and ( wait is defined )

- name: Verifying {{ title }} HTTP endpoint
  uri:
    url:            "http://{{ common.net.localhost }}:{{ port }}{{ item.path | default('')}}"
    status_code:    "{{ item.status | default( 200 )}}"
    return_content: yes
  register: http_verify_out
  with_items:
    - "{{ verify }}"
  failed_when: "'{{ item.content | default('') }}' not in http_verify_out.content"
  when:        ( port is defined ) and ( verify is defined )
