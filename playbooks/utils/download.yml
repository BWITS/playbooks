---
# ===================================================================================================
# Downloads and unpacks an archive titled {{ title }}
# ===================================================================================================
# - Downloads {{ url }} to {{ archive }}
# - Unpacks {{ archive }} to {{ home }}
#   {{ home }} is deleted before unpack operation, unless {{ clean }} is False
# - Runs {{ tests }} commands
# - Generates {{ configs }}
# - Runs {{ cleanup }} commands
# ===================================================================================================
# - Required variables: none. All are optional.
# ===================================================================================================
- set_fact:
    download:   "{{ (( url is defined ) and ( archive is defined )) | bool }}"
    unpack:     "{{ (( url is defined ) and ( archive is defined ) and ( home is defined )) | bool }}"
- set_fact:
    clean_home: "{{ ( unpack | bool and ( clean | default(True))) | bool }}"

- debug: var=download
- debug: var=unpack
- debug: var=clean_home

- debug: msg="Downloading '{{ url }}' => '{{ archive }}'"
  when:  download and ( not unpack )

- debug: msg="Downloading '{{ url }}' => '{{ archive }}' => '{{ home }}'"
  when:  unpack

- name: Downloading {{ title }}
  get_url:
    url:  "{{ url }}"
    dest: "{{ archive }}"
  when: download

- debug: msg="Deleting '{{ home }}'!"
  when:  clean_home

- file: path={{ home }} state=absent
  when: clean_home

- file: path={{ home }} state=directory
  when: clean_home

- name: Unpacking {{ title }}
  unarchive:
    src:  "{{ archive }}"
    dest: "{{ home }}"
    copy: false
  when: unpack

- name:        Running {{ title }} tests
  command:     "{{ item.run }}"
  environment: "{{ item.env | default({}) }}"
  register: test_out
  ignore_errors: yes # So we don't fail for non-zero exit code
  failed_when:   item.expect not in test_out.stdout
  with_items:
    - "{{ tests }}"
  when: tests is defined

- command: mkdir -p $(dirname {{ item.to }})
  with_items:
    - "{{ configs }}"
  when: configs is defined

- name: Generating {{ title }} configs
  template:
    src:  "{{ playbook_dir }}/roles/{{ item.role | default( service ) }}/templates/{{ item.from  }}"
    dest: "{{ item.to }}"
  with_items:
    - "{{ configs }}"
  when: configs is defined

- name:        Running {{ title }} cleanup commands
  command:     "{{ ubuntu.bash }} -c '{{ item }}'"
  environment: "{{ item.env | default({}) }}"
  with_items:
    - "{{ cleanup }}"
  when: cleanup is defined
