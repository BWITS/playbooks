---
# ===================================================================================================
# Downloads and unpacks an archive titled {{ title }}
# ===================================================================================================
# - Downloads {{ url }} to {{ archive }}
# - Unpacks {{ archive }} to {{ home }}
#   {{ home }} is deleted before unpack operation, unless {{ clean }} is False
# - Runs {{ tests }} commands
# - Generates {{ configs }}
# - Generates {{ env }} / {{ path }} (mutually exclusive) environment variables file
# - Runs {{ cleanup }} commands
# ===================================================================================================
# - Required variables: title. Others are optional.
# ===================================================================================================
- debug: msg="title = '{{ title }}'"

- set_fact:
    download:   "{{ (( url is defined ) and ( archive is defined )) | bool }}"
    unpack:     "{{ (( url is defined ) and ( archive is defined ) and ( home is defined )) | bool }}"
- set_fact:
    clean_home: "{{ ( unpack | bool and ( clean | default(True))) | bool }}"

- set_fact:
    archive_absolute: "{{ archive | absolute_path }}"
  when: download

- set_fact:
    home_absolute: "{{ home | absolute_path }}"
  when: unpack

- set_fact:
    env:
      PATH: "$PATH:{{ path }}"
  when: path is defined

# {{ env_file }} is a file containing service env variables, loaded by upstart script
- set_fact:
    env_file: "{{ ubuntu.envs_dir }}/{{ title.lower() }}.sh"
  when: env is defined

# {{ run_env }} in an environment (dictionary) used when running {{ tests }} and {{ cleanup }} commands
- set_fact:
    run_env: "{{ env | default({}) | expand_path }}"

- debug: var=download
- debug: var=unpack
- debug: var=clean_home
- debug: var=env
- debug: var=env_file
- debug: var=run_env

- debug: msg="Downloading {{ title }} - '{{ url }}' => '{{ archive_absolute }}'"
  when:  download and ( not unpack )

- debug: msg="Downloading and unpacking {{ title }} - '{{ url }}' => '{{ archive_absolute }}' => '{{ home_absolute }}'"
  when:  unpack

- name: Downloading {{ title }}
  get_url:
    url:  "{{ url }}"
    dest: "{{ archive_absolute }}"
  when: download

- debug: msg="Deleting '{{ home_absolute }}'!"
  when:  clean_home

- file: path={{ home_absolute }} state=absent
  when: clean_home

- file: path={{ home_absolute }} state=directory
  when: home is defined

- name: Unpacking {{ title }}
  unarchive:
    src:  "{{ archive_absolute }}"
    dest: "{{ home_absolute }}"
    copy: false
  when: unpack

- shell: mkdir -p "$( dirname {{ item.to }} )"
  with_items:
    - "{{ configs }}"
  when: configs is defined

- name: Generating {{ title }} configs
  template:
    src:  "{{ playbook_dir }}/roles/{{ item.role | default( service ) }}/templates/{{ item.from  }}"
    dest: "{{ item.to }}"
  with_items:
    - "{{ configs }}"
  when: configs is defined

- file: path="{{ env_file }}" state=absent
  when: env is defined

- name: Generating {{ title }} environment variables file
  lineinfile:
    dest:    "{{ env_file }}"
    create:  yes
    line:    'export {{ item.key }}="{{ item.value }}"'
  with_dict: env | default({})
  when:      env is defined

- name:        Running {{ title }} tests
  command:     "{{ ubuntu.bash }} -c '{{ item.run }} 2>&1'"
  environment: "{{ run_env }}"
  register:    test_out
  failed_when: item.expect not in test_out.stdout
  with_items:
    - "{{ tests }}"
  when: tests is defined

- name:        Running {{ title }} cleanup commands
  command:     "{{ ubuntu.bash }} -c '{{ item }} 2>&1'"
  environment: "{{ run_env }}"
  with_items:
    - "{{ cleanup }}"
  when: cleanup is defined
