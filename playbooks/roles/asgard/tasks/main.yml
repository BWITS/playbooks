---
- assert:
    that:
      - AWS_ACCOUNT_ID        is defined
      - AWS_ACCESS_KEY_ID     is defined
      - AWS_SECRET_ACCESS_KEY is defined

- group:
    name:  "{{ asgard.group }}"

- user:
    name:  "{{ asgard.user }}"
    group: "{{ asgard.group }}"
    home:  "{{ asgard.user_home }}"

- name: Create Asgard home dir
  file:
    path:  "{{ asgard.home }}"
    state: directory
    owner: "{{ asgard.user }}"
    group: "{{ asgard.group }}"
    mode:  "{{ common.mode.directory }}"

- name: Create Asgard log dir
  file:
    path:  "{{ asgard.log | dirname }}"
    state: directory
    owner: "{{ asgard.user }}"
    group: "{{ asgard.group }}"
    mode:  "{{ common.mode.directory }}"

- name: Create Asgard config
  template:
    src:   Config.groovy
    dest:  "{{ asgard.home }}"
    owner: "{{ asgard.user }}"
    group: "{{ asgard.group }}"

- name: Create Asgard init script
  template:
    src:   asgard
    dest:  "{{ ubuntu.init_dir }}"
    owner: root
    group: root
    mode:  "{{ common.mode.script }}"

# http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html
# http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
- name: Create AWS credentials directory
  file:
    path:  "{{ asgard.user_home }}/.aws"
    state: directory
    owner: "{{ asgard.user }}"
    group: "{{ asgard.group }}"
    mode:  "{{ common.mode.directory }}"

- name: Create AWS credentials file
  template:
    src:   credentials
    dest:  "{{ asgard.user_home }}/.aws"
    owner: "{{ asgard.user }}"
    group: "{{ asgard.group }}"
    mode:  "{{ common.mode.secret }}"

# CloudNative Bakery bake - https://bakery.cloudnative.io/
# 'artifacts' is sent as external variable, it contains Jenkins artifacts URL
- name: Download Asgard JAR file from '{{ artifacts }}'
  get_url:
    url:   "{{ artifacts }}"
    dest:  "{{ asgard.jar }}"
    force: yes
  when: artifacts is defined

- name: Download Asgard JAR file from '{{ asgard.jar_url }}'
  get_url:
    url:  "{{ asgard.jar_url }}"
    dest: "{{ asgard.jar }}"
  when: ( not ( artifacts is defined ))

- name: Check Asgard java
  command: "{{ asgard.java }} -version"

- name: Stop Asgard service
  service: name=asgard state=stopped
  when: ( not asgard_start_service|bool )

- name: Restart Asgard service
  service: name=asgard state=restarted
  when: asgard_start_service
