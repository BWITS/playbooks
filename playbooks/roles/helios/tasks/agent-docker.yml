---
# ---------------------------------------------------------------
# Handles Docker-related steps in Helios agent setup
# ---------------------------------------------------------------
- set_fact: helios_master_ip="{{ helios_master }}"
  when: helios_master | match( common.net.ip_regex )

# Translating Helios master host into its IP, knowing it registered itself already
- name: Reading '{{ helios_master }}' IP address
  shell: dig '@{{ helios_master }}' '{{ helios_master }}' | grep '{{ helios_master }}.' | grep -v '^;' | head -1 | awk '{print $5}'
  register: helios_master_ip_out
  when: not ( helios_master | match( common.net.ip_regex ))

- set_fact: helios_master_ip="{{ helios_master_ip_out.stdout }}"
  when: not ( helios_master | match( common.net.ip_regex ))

- debug:   msg="Helios master IP is [{{ helios_master_ip }}]"
- include: verify-master.yml master={{ helios_master_ip }} register_host="{{ agent_name }}"

- name: Updating Docker config
  template:
    src:  docker
    dest: "{{ ubuntu.etc_default }}/docker"

- name:    Restarting Docker service
  service: name=docker state=restarted enabled=yes

- include: "{{ common.utils.run }}"
  vars:
    title: Docker status checks
    commands:
      - { run: docker --version, expect: Docker version  }
      - { run: docker ps,        expect: [ CONTAINER ID, IMAGE, COMMAND, CREATED, STATUS, PORTS, NAMES ]}
      - { run: docker images,    expect: [ REPOSITORY, TAG, IMAGE ID, CREATED, VIRTUAL SIZE ]}

- name: Checking Docker remote API
  uri: url="{{ helios.agent.docker.http }}/info" return_content=yes timeout=5
  register: docker_api

- fail: msg="Failed to call '{{ helios.agent.docker.http }}/info', result JSON has no 'OperatingSystem' - [{{ docker_api.json }}]"
  when: not ( 'OperatingSystem' in docker_api.json )
