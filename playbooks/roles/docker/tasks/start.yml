---
- set_fact:
    # evgenyg/echo:latest -> docker-evgenyg-echo-latest
    # nginx               -> docker-nginx
    name:    "docker-{{ name | default( start | replace( '/', '-' ) | replace( ':', '-' )) }}"
    # Timeout in seconds for container to be pulled and started
    timeout: "{{ timeout | default( 300 ) }}"

- debug: msg="Setting up auto-start of Docker image '{{ start }}' as service '{{ name }}'"

# [ port1, port2, port3 ] => "-p port1:port1 -p port2:port1 -p port3:port3"
- name:     Setting Docker ports
  set_fact:
    docker_ports: "{{ ports | transform( 'lambda port: \"-p {0}:{0}\".format(port)' ) | join( ' ' ) }}"
  when:     ports is defined

- set_fact: env_file="/opt/{{ name }}.env"
  when: env_vars is defined

- set_fact: docker_env="--env-file '{{ env_file }}'"
  when: env_vars is defined

- file: path="{{ env_file }}" state=absent
  when: env_vars is defined

- name: Creating Docker env file
  lineinfile:
    # http://docs.ansible.com/faq.html#how-do-i-access-a-variable-name-programmatically
    line:   "{{ item }}={{ hostvars[ inventory_hostname ][ item ] | mandatory }}"
    dest:   "{{ env_file }}"
    create: yes
  with_items: env_vars
  when: env_vars is defined

- include: "{{ common.utils.service }}"
  vars:
    title:   Docker app '{{ name }}'
    service: "{{ name }}"
    command: "docker kill '{{ name }}'; docker rm '{{ name }}'; docker pull '{{ start }}'; docker run {{ docker_ports | default('') }} {{ docker_env | default ('') }} --name '{{ name }}' '{{ start }}'"
